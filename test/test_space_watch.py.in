# Header

import unittest

from launch import LaunchDescription
from launch.actions import ExecuteProcess

import launch_testing
import launch_testing.actions
import launch_testing.asserts
import launch_testing_ros


def generate_test_description():
    launch_description = LaunchDescription()
    process_under_test = ExecuteProcess(
        cmd=['@SPACE_WATCH_EXECUTABLE@'],
        name='test_space_watch',
        output='screen'
    )
    launch_description.add_action(process_under_test)
    launch_description.add_action(
        launch_testing.actions.ReadyToTest()
    )
    return launch_description, locals()


class TestComposition(unittest.TestCase):

    def test_space_watch(self, proc_output, process_under_test):
        """Test process' output against expectations."""
        output_filter = launch_testing_ros.tools.basic_output_filter(
            filtered_rmw_implementation='@rmw_implementation@'
        )
        proc_output.assertWaitFor(
            expected_output=launch_testing.tools.expected_output_from_file(
                path='@EXPECTED_OUTPUT_ALL@'
            ), process=process_under_test, output_filter=output_filter, timeout=10
        )
